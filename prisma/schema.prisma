generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       User[]
}

model Permission {
  id          String           @id @default(uuid()) @db.Uuid
  name        String           @unique
  description String?
  roles       RolePermission[]
}

model RolePermission {
  roleId       String   @db.Uuid
  permissionId String   @db.Uuid
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model User {
  id             String         @id @default(uuid()) @db.Uuid
  name           String?
  email          String?        @unique
  phone          String?        @unique
  password       String
  roleId         String         @db.Uuid
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  messages       Message[]
  orders         Order[]
  ratings        Rating[]
  shops          Shop[]
  shopRequests   ShopRequest[]
  refreshTokens  RefreshToken[]

  role           Role           @relation(fields: [roleId], references: [id])
}

model Shop {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @db.Uuid
  name           String
  description    String?
  phone          String?
  whatsappNumber String?
  address        String?
  locationId     String       @db.Uuid
  googleMapsUrl  String?
  bannerUrl      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  license        License?
  messages       Message[]
  payments       Payment[]
  products       Product[]
  promotions     Promotion[]
  ratings        Rating[]
  location       Location     @relation(fields: [locationId], references: [id])
  owner          User         @relation(fields: [userId], references: [id])
  views          View[]
}

model License {
  id            String   @id @default(uuid()) @db.Uuid
  shopId        String   @unique @db.Uuid
  licenseNumber String
  issuedDate    DateTime
  expiryDate    DateTime
  status        String
  shop          Shop     @relation(fields: [shopId], references: [id])
}

model Location {
  id        String  @id @default(uuid()) @db.Uuid
  city      String
  region    String
  latitude  Float
  longitude Float
  shops     Shop[]
}

model Category {
  id       String    @id @default(uuid()) @db.Uuid
  name     String    @unique
  products Product[]
}

model Product {
  id          String         @id @default(uuid()) @db.Uuid
  shopId      String         @db.Uuid
  categoryId  String         @db.Uuid
  title       String
  description String?
  price       Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orders      OrderItem[]
  category    Category       @relation(fields: [categoryId], references: [id])
  shop        Shop           @relation(fields: [shopId], references: [id])
  images      ProductImage[]
  promotions  Promotion[]
  ratings     Rating[]
  views       View[]
}

model ProductImage {
  id         String   @id @default(uuid()) @db.Uuid
  productId  String   @db.Uuid
  imageUrl   String
  isPrimary  Boolean  @default(false)
  position   Int
  uploadedAt DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
}

model Rating {
  id        String   @id @default(uuid()) @db.Uuid
  value     Int
  review    String?
  userId    String   @db.Uuid
  productId String?  @db.Uuid
  shopId    String?  @db.Uuid
  createdAt DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id])
  shop      Shop?    @relation(fields: [shopId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@unique([userId, shopId])
}

model Promotion {
  id        String   @id @default(uuid()) @db.Uuid
  shopId    String   @db.Uuid
  productId String?  @db.Uuid
  promoType String
  startDate DateTime
  endDate   DateTime
  price     Float
  createdAt DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model View {
  id         String   @id @default(uuid()) @db.Uuid
  entityType String
  shopId     String?  @db.Uuid
  productId  String?  @db.Uuid
  viewedAt   DateTime @default(now())
  ipAddress  String
  product    Product? @relation(fields: [productId], references: [id])
  shop       Shop?    @relation(fields: [shopId], references: [id])
}

model Payment {
  id            String   @id @default(uuid()) @db.Uuid
  shopId        String   @db.Uuid
  amount        Float
  currency      String
  paymentMethod String
  transactionId String
  status        String
  paidAt        DateTime
  shop          Shop     @relation(fields: [shopId], references: [id])
}

model Order {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @db.Uuid
  total     Float
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @db.Uuid
  productId String   @db.Uuid
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Message {
  id      String   @id @default(uuid()) @db.Uuid
  userId  String   @db.Uuid
  shopId  String   @db.Uuid
  content String
  sentAt  DateTime @default(now())
  shop    Shop     @relation(fields: [shopId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model OtpCode {
  id        String   @id @default(uuid()) @db.Uuid
  phone     String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([phone])
}

model ShopRequest {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  name        String
  description String?
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @unique
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiresAt  DateTime

  @@index([userId])
}
